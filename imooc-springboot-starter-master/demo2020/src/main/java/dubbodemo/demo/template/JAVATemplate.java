package dubbodemo.demo.template;

/**
 * @author wj
 * @date 2020/9/9 - 22:24
 *
 * 模板方法模式：（Template Method Pattern） 通常又叫模板模式，是指定义一个算法的骨架，并允许子类为其中的一个或者多个步骤提供实现。
 *  （只能通过继承来实现）
 * 模板方法使得子类在不改变算法的情况下，重新定义算法的某些步骤
 *
 * 属于行为型设计模式
 *
 * 使用场景：
 *       1、一次性实现一个算法不变的部分，并将可变的行为留给子类来实现
 *       2、各子类中公共的行为被提取出来并集中到一个公共的父类中，从而避免代码重复。
 *
 *
 * 优点：
 * 1、利用模板方法将相同处理逻辑的代码放到抽象父类中，可以提高代码复用性。
 * 2、将不用的代码不同的子类中，通过对子类的扩展增加新的行为，提高代码的扩展性。
 * 3、把不变的行为写在父类上，去除子类的重复代码，提供一个很好的代码复用平台，符合开闭原则
 *
 * 缺点：
 * 1、类的数目增加，每一个抽象类都需要一个子类来实现，这样导致类的个数增加。
 * 2、类的数目增加，间接的增加了系统实现的复杂度
 * 3、继承关系自身缺点，如果父类添加了新的抽象方法，所有子类都要改一遍
 */
public abstract class JAVATemplate {

    protected void  v1() {
        System.out.println("执行V1");
    }

    protected void  v2() {
        System.out.println("执行V1");
    }

    protected void  v3() {
        System.out.println("执行V1");
    }

    public final void dov() {
        this.v1();
        this.v2();
        this.v3();
    }
}
